name: pytest

on:
  push:
    branches:
      - main
      - epic/*
      - "[0-9]+.[0-9]+.x"
  pull_request:
    branches:
      - main
      - epic/*
      - "[0-9]+.[0-9]+.x"
  workflow_dispatch:
    inputs:
      ampform-version:
        description: AmpForm branch, tag, or commit
        required: false
        type: string
      tensorflow-version:
        description: TensorFlow version
        required: false
        type: string
      custom-install:
        description: Custom pip install statements
        required: false
        type: string

jobs:
  codecov:
    name: Unit tests + coverage
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        python-version: ["3.7"]
    steps:
      - uses: actions/checkout@master
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@master
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -c .constraints/py${{ matrix.python-version }}.txt -e .[test,all]
      - name: Install specific version of AmpForm
        if: github.event.inputs.ampform-version
        run: |
          pip install git+https://github.com/ComPWA/ampform@${{ github.event.inputs.ampform-version }}
      - name: Install specific version of TensorFlow
        if: github.event.inputs.tensorflow-version
        run: |
          pip install "tensorflow==${{ github.event.inputs.tensorflow-version }}"
      - name: Run custom pip install commands
        if: github.event.inputs.custom-install
        run: ${{ github.event.inputs.custom-install }}
      - name: Test with pytest-cov
        run: pytest --cov=tensorwaves --cov-report=xml
      - uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: test_output_${{ matrix.os }}_${{ matrix.python-version }}
          path: tests/output
      - uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          # cspell:ignore unittests
          flags: unittests

  pytest:
    name: Unit tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
        python-version: ["3.6", "3.7", "3.8", "3.9"]
        exclude:
          - os: ubuntu-20.04 # coverage job
            python-version: "3.7"
        include:
          - os: macos-11
            python-version: "3.7"
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -c .constraints/py${{ matrix.python-version }}.txt -e .[test,all]
      - name: Install specific version of AmpForm
        if: github.event.inputs.ampform-version
        run: |
          pip install git+https://github.com/ComPWA/ampform@${{ github.event.inputs.ampform-version }}
      - name: Install specific version of TensorFlow
        if: github.event.inputs.tensorflow-version
        run: |
          pip install "tensorflow==${{ github.event.inputs.tensorflow-version }}"
      - name: Run custom pip install commands
        if: github.event.inputs.custom-install
        run: ${{ github.event.inputs.custom-install }}
      - name: Run unit tests and doctests with pytest
        env:
          CUDA_VISIBLE_DEVICES: "-1"
        run: pytest -n auto
      - uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: test_output_${{ matrix.os }}_${{ matrix.python-version }}
          path: tests/output

  pytest-jax:
    name: Unit tests (JAX only)
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -c .constraints/py3.9.txt -e .[test,jax] tox
      - name: Install specific version of AmpForm
        if: github.event.inputs.ampform-version
        run: |
          pip install git+https://github.com/ComPWA/ampform@${{ github.event.inputs.ampform-version }}
      - name: Install specific version of TensorFlow
        if: github.event.inputs.tensorflow-version
        run: |
          pip install "tensorflow==${{ github.event.inputs.tensorflow-version }}"
      - name: Run custom pip install commands
        if: github.event.inputs.custom-install
        run: ${{ github.event.inputs.custom-install }}
      - name: Run unit tests and doctests with pytest
        run: tox -e jax

  pytest-notebook:
    name: Run all notebooks
    if: join(github.event.inputs.*)
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -c .constraints/py3.8.txt -e .[doc,test] tox
          sudo apt-get -y install graphviz
      - name: Install specific version of AmpForm
        if: github.event.inputs.ampform-version
        run: |
          pip install git+https://github.com/ComPWA/ampform@${{ github.event.inputs.ampform-version }}
      - name: Install specific version of TensorFlow
        if: github.event.inputs.tensorflow-version
        run: |
          pip install "tensorflow==${{ github.event.inputs.tensorflow-version }}"
      - name: Run custom pip install commands
        if: github.event.inputs.custom-install
        run: ${{ github.event.inputs.custom-install }}
      - name: Run all notebooks with pytest
        run: tox -e nb
