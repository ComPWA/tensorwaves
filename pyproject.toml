[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools>=61.2",
    "setuptools_scm",
]

[project]
authors = [{name = "Common Partial Wave Analysis", email = "compwa-admin@ep1.rub.de"}]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering",
    "Typing :: Typed",
]
dependencies = [
    "PyYAML >=5.1", # https://stackoverflow.com/a/55171433
    "attrs >=20.1.0", # https://www.attrs.org/en/stable/api.html#next-gen
    "iminuit >=2.0",
    "numpy",
    "sympy >=1.9", # lambdify cse
    "tqdm >=4.24.0", # autonotebook
]
description = "Python fitter package for multiple computational back-ends"
dynamic = ["version"]
keywords = [
    "HEP",
    "PWA",
    "amplitude analysis",
    "partial wave analysis",
    "particle physics",
    "physics",
    "tensorflow",
]
license = {file = "LICENSE"}
maintainers = [{email = "compwa-admin@ep1.rub.de"}]
name = "tensorwaves"
requires-python = ">=3.9"

[project.optional-dependencies]
jax = [
    "jax",
    "jaxlib",
]
numba = [
    "numba",
]
phasespace = [
    "tensorwaves[phsp]",
]
phsp = [
    "phasespace[tf] >=1.7.0",
    "tensorwaves[tensorflow]",
]
pwa = [
    "ampform >=0.12.0", # https://github.com/ComPWA/ampform/pull/177
    "tensorwaves[phsp]",
]
scipy = [
    "scipy >=1",
]
tensorflow = [
    "tensorwaves[tf]",
]
tf = [
    "numpy<2",
    "tensorflow !=2.15.0.post1", # https://github.com/ComPWA/tensorwaves/actions/runs/7147814088/job/19467965144?pr=509
    "tensorflow >=2.4", # tensorflow.experimental.numpy
]
viz = [
    "graphviz",
]

[project.readme]
content-type = "text/markdown"
file = "README.md"

[project.urls]
Changelog = "https://github.com/ComPWA/tensorwaves/releases"
Documentation = "https://tensorwaves.rtfd.io"
Source = "https://github.com/ComPWA/tensorwaves"
Tracker = "https://github.com/ComPWA/tensorwaves/issues"

[dependency-groups]
dev = [
    "ruff",
    "sphinx-autobuild",
    {include-group = "doc"},
    {include-group = "jupyter"},
    {include-group = "style"},
    {include-group = "test"},
]
doc = [
    "jupyter",
    "matplotlib",
    "myst-nb",
    "sphinx",
    "sphinx-api-relink",
    "sphinx-book-theme",
    "sphinx-codeautolink[ipython]",
    "sphinx-comments",
    "sphinx-copybutton",
    "sphinx-design",
    "sphinx-thebe",
    "sphinx-togglebutton",
    "sphobjinv",
    {include-group = "notebooks"},
]
jupyter = [
    "jupyterlab",
    "jupyterlab-code-formatter",
    "jupyterlab-git",
    "jupyterlab-lsp",
    "jupyterlab-myst",
    "python-lsp-ruff",
    "python-lsp-server[rope]",
    {include-group = "doc"},
]
notebooks = [
    "black",
    "ipympl",
    "pandas",
    "tensorwaves[jax,pwa]",
]
style = [
    "mypy >=0.570",
    {include-group = "types"},
]
test = [
    "ampform >=0.13",
    "nbmake",
    "pyarrow",
    "pytest-benchmark",
    "pytest-cov",
    "pytest-xdist",
    {include-group = "test-types"},
]
test-types = [
    "ipython", # test _repr_pretty_
    "pytest",
    "pytest-mock",
]
types = [
    "sphinx-api-relink",
    "tensorwaves[jax]",
    "tensorwaves[pwa]",
    "types-PyYAML",
    "types-requests",
    "types-tensorflow",
    "types-tqdm",
    {include-group = "test-types"},
]

[tool.setuptools]
include-package-data = false
package-dir = {"" = "src"}

[tool.setuptools.package-data]
tensorwaves = ["py.typed"]

[tool.setuptools.packages.find]
namespaces = false
where = ["src"]

[tool.setuptools_scm]
local_scheme = "no-local-version"
version_scheme = "only-version"
write_to = "src/tensorwaves/version.py"

[tool.coverage.run]
branch = true
source = ["src"]

[tool.mypy]
disallow_incomplete_defs = true
disallow_untyped_defs = true
exclude = "_build"
show_error_codes = true
warn_unused_configs = true

[[tool.mypy.overrides]]
check_untyped_defs = true
disallow_incomplete_defs = false
disallow_untyped_defs = false
module = ["benchmarks.*", "tests.*"]

[[tool.mypy.overrides]]
ignore_errors = true
module = ["typings.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["iminuit.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["numba.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["phasespace"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["scipy.optimize"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["sympy.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["tensorflow.python.ops.numpy_ops"]

[tool.pyright]
exclude = [
    "**/.git",
    "**/.ipynb_checkpoints",
    "**/.mypy_cache",
    "**/.pytest_cache",
    "**/.tox",
    "**/.venv/",
    "**/__pycache__",
    "**/_build",
]
reportArgumentType = false
reportAttributeAccessIssue = false
reportGeneralTypeIssues = false
reportMissingParameterType = false
reportMissingTypeArgument = false
reportMissingTypeStubs = false
reportOperatorIssue = false
reportPrivateImportUsage = false
reportReturnType = false
reportUnboundVariable = false
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryComparison = true
reportUnnecessaryIsInstance = false
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedImport = true
reportUnusedVariable = true
typeCheckingMode = "strict"

[tool.pytest.ini_options]
addopts = ["--color=yes"]
filterwarnings = [
    "error",
    "ignore: The `hash` argument is deprecated in favor of `unsafe_hash` and will be removed in or after August 2025.:DeprecationWarning",
    "ignore: `np.bool8` is a deprecated alias for `np.bool_`.*:DeprecationWarning",
    "ignore:.* is deprecated and will be removed in Pillow 10.*:DeprecationWarning",
    "ignore:.*Type google\\._upb\\..*This is deprecated.*",
    "ignore:.*Using or importing the ABCs.*:DeprecationWarning",
    "ignore:.*jax.xla_computation is deprecated*:DeprecationWarning",
    "ignore:.*the imp module is deprecated in favour of importlib.*:DeprecationWarning",
    "ignore:Passing a schema to Validator.iter_errors is deprecated.*:DeprecationWarning",
    "ignore:Please use `spmatrix` from the `scipy.sparse` namespace.*:DeprecationWarning",
    "ignore:The distutils package is deprecated and slated for removal.*:DeprecationWarning",
    "ignore:divide by zero encountered in divide:RuntimeWarning",
    "ignore:divide by zero encountered in true_divide:RuntimeWarning",
    "ignore:invalid value encountered in .*:RuntimeWarning",
    "ignore:jax\\.xla_computation is deprecated\\. Please use the AOT APIs\\.:DeprecationWarning",
    "ignore:ml_dtypes\\.float8.*:DeprecationWarning",
    "ignore:module 'sre_constants' is deprecated:DeprecationWarning",
    "ignore:numpy.ufunc size changed, may indicate binary incompatibility.*:RuntimeWarning",
    "ignore:os\\.fork\\(\\) was called\\. os\\.fork\\(\\) is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock\\.:RuntimeWarning",
    "ignore:unclosed .*:ResourceWarning",
]
markers = ["slow: marks tests as slow (select with '-m slow')"]
norecursedirs = [
    ".ipynb_checkpoints",
    ".virtual_documents",
    "_build",
    "docs/api",
    "tests/output",
]
testpaths = [
    "benchmarks",
    "src",
    "tests",
]

[tool.ruff]
extend-exclude = ["typings"]
extend-include = ["*.ipynb"]
preview = true
show-fixes = true
src = [
    "src",
    "tests",
]

[tool.ruff.format]
docstring-code-format = true
line-ending = "lf"

[tool.ruff.lint]
ignore = [
    "ANN401",
    "C408",
    "COM812",
    "CPY001",
    "D101",
    "D102",
    "D103",
    "D105",
    "D107",
    "D203",
    "D213",
    "D407",
    "D416",
    "DOC",
    "DTZ005",
    "E501",
    "FBT00",
    "FURB10",
    "FURB140",
    "G004",
    "ISC001",
    "PLW1514",
    "PT001",
    "PTH",
    "RUF012",
    "S307",
    "SIM108",
]
select = ["ALL"]
task-tags = ["cspell"]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["display"]

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.flake8-self]
ignore-names = [
    "_latex",
    "_numpycode",
    "_print",
]

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
"*.ipynb" = [
    "ANN",
    "ARG002",
    "B018",
    "C90",
    "D",
    "E303",
    "E402",
    "E703",
    "F404",
    "N806",
    "N816",
    "PLR09",
    "PLR2004",
    "PLW0602",
    "PLW0603",
    "S101",
    "S301",
    "S403",
    "T20",
    "TCH00",
]
"*docs/usage/faster-lambdify.ipynb" = [
    "F401",
    "F821",
]
"benchmarks/*" = [
    "ANN",
    "D",
    "INP001",
    "PGH001",
    "PLC0415",
    "PLC2701",
    "PLR0913",
    "PLR0917",
    "PLR2004",
    "PLR6301",
    "S101",
    "SLF001",
    "T20",
]
"callbacks.py" = ["ARG002"]
"docs/*" = [
    "E402",
    "INP001",
    "S101",
    "S113",
    "T201",
]
"docs/conf.py" = [
    "A001",
    "D100",
    "S404",
]
"setup.py" = ["D100"]
"src/tensorwaves/function/_backend.py" = ["PLC0415"]
"src/tensorwaves/function/sympy/__init__.py" = ["PLC0415"]
"tests/*" = [
    "ANN",
    "ARG002",
    "D",
    "INP001",
    "PGH001",
    "PLC0415",
    "PLC2701",
    "PLR0913",
    "PLR0914",
    "PLR0917",
    "PLR2004",
    "PLR6301",
    "S101",
    "SLF001",
    "T20",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
allow-dunder-method-names = [
    "_repr_pretty_",
]

[tool.tomlsort]
all = false
ignore_case = true
in_place = true
sort_first = [
    "build-system",
    "project",
    "tool.setuptools",
    "tool.setuptools_scm",
]
spaces_indent_inline_array = 4
trailing_comma_inline_array = true

[tool.tox]
legacy_tox_ini = """
[tox]
envlist =
    cov,
    docnb-force,
    linkcheck,
    sty,
skip_install = True
skip_missing_interpreters = True
skipsdist = True

[testenv]
allowlist_externals =
    pytest
commands =
    pytest {posargs}
description = Run all unit tests
passenv = *
setenv =
    PYTHONHASHSEED = 0

[testenv:bench]
allowlist_externals =
    pytest
commands =
    pytest {posargs:benchmarks} \
        --durations=0 \
        --benchmark-autosave \
        -k=benchmark
description = Run benchmark tests and visualize in histogram

[testenv:cov]
allowlist_externals =
    pytest
commands =
    pytest {posargs:src tests} \
        --cov-fail-under=85 \
        --cov-report=html \
        --cov-report=xml \
        --cov=tensorwaves
description = Compute test coverage

[testenv:jax]
allowlist_externals =
    pytest
commands =
    pytest {posargs:} \
        -k="benchmark or not benchmark" \
        -k="not (ampform or four_momenta or numba or tensorflow or tf)" \
        --benchmark-disable
description = Run tests with JAX only

[testenv:doc]
allowlist_externals =
    sphinx-build
commands =
    sphinx-build \
        --builder=dirhtml \
        --fail-on-warning \
        --keep-going \
        --show-traceback \
        docs/ docs/_build/html
description = Build documentation and API through Sphinx
setenv =
    {[testenv]setenv}
    PYTHONWARNINGS =

[testenv:docnb]
base = doc
description = {[testenv:doc]description} with cached notebook execution
setenv =
    {[testenv:doc]setenv}
    EXECUTE_NB = yes

[testenv:docnb-force]
base = doc
description = {[testenv:doc]description} with notebook execution (no cache)
setenv =
    {[testenv:doc]setenv}
    FORCE_EXECUTE_NB = yes

[testenv:doclive]
allowlist_externals =
    sphinx-autobuild
base = doc
commands =
    sphinx-autobuild \
        --builder=dirhtml \
        --ignore=docs/_build/ \
        --ignore=docs/api/ \
        --ignore=docs/usage/logs/ \
        --open-browser \
        --port=0 \
        --re-ignore='.*/__pycache__/.*' \
        --re-ignore='.*/.ipynb_checkpoints/.*' \
        --re-ignore='.*/.virtual_documents/.*' \
        --re-ignore='.*\\.csv' \
        --re-ignore='.*\\.gif' \
        --re-ignore='.*\\.gv' \
        --re-ignore='.*\\.inv' \
        --re-ignore='.*\\.json' \
        --re-ignore='.*\\.pickle' \
        --re-ignore='.*\\.png' \
        --re-ignore='.*\\.svg' \
        --re-ignore='.*\\.ya?ml' \
        --re-ignore='docs/usage/sub_expr_f?' \
        --watch=docs \
        --watch=src \
        docs/ docs/_build/html
description = Set up a server to directly preview changes to the HTML pages

[testenv:docnblive]
base = doclive
description = {[testenv:doclive]description} with notebook execution (no cache)
setenv =
    {[testenv:doclive]setenv}
    EXECUTE_NB = yes

[testenv:linkcheck]
allowlist_externals =
    sphinx-build
base = doc
commands =
    sphinx-build \
        --builder=linkcheck \
        --show-traceback \
        docs/ docs/_build/linkcheck
description = Check external links in the documentation (requires internet connection)

[testenv:nb]
allowlist_externals =
    pytest
commands =
    pytest --nbmake {posargs:docs}
description = Run all notebooks with pytest

[testenv:sty]
allowlist_externals =
    pre-commit
commands =
    pre-commit run --all-files {posargs}
description = Perform all linting, formatting, and spelling checks
setenv =
    SKIP = pyright
"""
