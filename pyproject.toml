[build-system]
requires = [
    "setuptools>=61.2",
    "setuptools_scm",
]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
write_to = "src/tensorwaves/version.py"

[tool.black]
exclude = '''
/(
    .*\.egg-info
    | .*build
    | \.eggs
    | \.git
    | \.pytest_cache
    | \.tox
    | \.venv
    | \.vscode
    | dist
)/
'''
include = '\.pyi?$'
preview = true
target-version = [
    "py310",
    "py311",
    "py37",
    "py38",
    "py39",
]

[tool.coverage.run]
branch = true
source = ["src"]

[tool.mypy]
disallow_incomplete_defs = true
disallow_untyped_defs = true
exclude = "_build"
show_error_codes = true
warn_unused_configs = true

[[tool.mypy.overrides]]
check_untyped_defs = true
disallow_incomplete_defs = false
disallow_untyped_defs = false
module = ["benchmarks.*", "tests.*"]

[[tool.mypy.overrides]]
ignore_errors = true
module = ["typings.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["IPython.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["iminuit.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["numba.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["numpy.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["phasespace.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["scipy.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["sphinx.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["tensorflow.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["tqdm.*"]

[tool.nbqa.addopts]
ruff = [
    "--extend-ignore=B018",
    "--extend-ignore=C90",
    "--extend-ignore=D",
    "--extend-ignore=N806",
    "--extend-ignore=N816",
    "--extend-ignore=PLR09",
    "--extend-ignore=PLR2004",
    "--extend-ignore=PLW0602",
    "--extend-ignore=PLW0603",
    "--extend-ignore=S301",
    "--line-length=85",
]

[tool.pyright]
exclude = [
    "**/.git",
    "**/.ipynb_checkpoints",
    "**/.mypy_cache",
    "**/.pytest_cache",
    "**/.tox",
    "**/__pycache__",
    "**/_build",
]
reportGeneralTypeIssues = false
reportMissingParameterType = false
reportMissingTypeArgument = false
reportMissingTypeStubs = false
reportPrivateImportUsage = false
reportUnboundVariable = false
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryComparison = true
reportUnnecessaryIsInstance = false
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedImport = true
reportUnusedVariable = true
typeCheckingMode = "strict"

[tool.pytest.ini_options]
addopts = '''
--color=yes
--doctest-continue-on-failure
--doctest-modules
--durations=3
--ignore-glob=*/.ipynb_checkpoints/*
--ignore=docs/abbreviate_signature.py
--ignore=docs/conf.py
-k "not benchmark"
-m "not slow"'''
doctest_optionflags = "NORMALIZE_WHITESPACE"
filterwarnings = [
    "error",
    "ignore: `np.bool8` is a deprecated alias for `np.bool_`.*:DeprecationWarning",
    "ignore:.* is deprecated and will be removed in Pillow 10.*:DeprecationWarning",
    "ignore:.*Using or importing the ABCs.*:DeprecationWarning",
    "ignore:.*the imp module is deprecated in favour of importlib.*:DeprecationWarning",
    "ignore:Passing a schema to Validator.iter_errors is deprecated.*:DeprecationWarning",
    "ignore:Please use `spmatrix` from the `scipy.sparse` namespace.*:DeprecationWarning",
    "ignore:The .* argument to NotebookFile is deprecated.*:pytest.PytestRemovedIn8Warning",
    "ignore:The distutils package is deprecated and slated for removal.*:DeprecationWarning",
    "ignore:divide by zero encountered in divide:RuntimeWarning",
    "ignore:divide by zero encountered in true_divide:RuntimeWarning",
    "ignore:invalid value encountered in .*:RuntimeWarning",
    "ignore:module 'sre_constants' is deprecated:DeprecationWarning",
    "ignore:numpy.ufunc size changed, may indicate binary incompatibility.*:RuntimeWarning",
    "ignore:unclosed .*:ResourceWarning",
]
markers = ["slow: marks tests as slow (select with '-m slow')"]
norecursedirs = [
    "_build",
    "docs/api",
    "tests/output",
]
testpaths = [
    "benchmarks",
    "src",
    "tests",
]

[tool.ruff]
extend-exclude = ["typings"]
extend-select = [
    "A",
    "B",
    "BLE",
    "C4",
    "C90",
    "D",
    "EM",
    "ERA",
    "FA",
    "I",
    "ICN",
    "INP",
    "ISC",
    "N",
    "NPY",
    "PGH",
    "PIE",
    "PL",
    "Q",
    "RET",
    "RSE",
    "RUF",
    "S",
    "SIM",
    "T20",
    "TCH",
    "TID",
    "TRY",
    "UP",
    "YTT",
]
ignore = [
    "C408",
    "D101",
    "D102",
    "D103",
    "D105",
    "D107",
    "D203",
    "D213",
    "D407",
    "D416",
    "E501",
    "RUF012",
    "S307",
    "SIM108",
]
show-fixes = true
src = [
    "src",
    "tests",
]
target-version = "py37"
task-tags = ["cspell"]

[tool.ruff.per-file-ignores]
"benchmarks/*" = [
    "D",
    "PLR0913",
    "PLR2004",
    "S101",
]
"docs/*" = [
    "E402",
    "INP001",
    "S101",
    "S113",
    "T201",
]
"docs/conf.py" = ["PLW2901"]
"setup.py" = ["D100"]
"tests/*" = [
    "D",
    "INP001",
    "PGH001",
    "PLR0913",
    "PLR2004",
    "S101",
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.tomlsort]
all = false
ignore_case = true
in_place = true
sort_first = [
    "build-system",
    "project",
    "tool.setuptools",
    "tool.setuptools_scm",
]
sort_table_keys = true
spaces_indent_inline_array = 4
trailing_comma_inline_array = true

[tool.setuptools]
package-dir = {"" = "src"}
include-package-data = false

[tool.setuptools.packages.find]
where = ["src"]
namespaces = false

[tool.setuptools.package-data]
tensorwaves = ["py.typed"]

[project]
name = "tensorwaves"
description = "Python fitter package for multiple computational back-ends"
authors = [{name = "Common Partial Wave Analysis", email = "compwa-admin@ep1.rub.de"}]
maintainers = [{email = "compwa-admin@ep1.rub.de"}]
license = {text = "GPLv3 or later"}
keywords = [
    "HEP",
    "PWA",
    "amplitude analysis",
    "partial wave analysis",
    "particle physics",
    "physics",
    "tensorflow",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Physics",
    "Typing :: Typed",
]
requires-python = ">=3.7"
dependencies = [
    "attrs >=20.1.0", # https://www.attrs.org/en/stable/api.html#next-gen
    "iminuit >=2.0",
    "numpy",
    "PyYAML >=5.1", # https://stackoverflow.com/a/55171433
    "sympy >=1.9", # lambdify cse
    "tqdm >=4.24.0", # autonotebook
]
dynamic = ["version"]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.urls]
Tracker = "https://github.com/ComPWA/tensorwaves/issues"
Changelog = "https://github.com/ComPWA/tensorwaves/releases"
Documentation = "https://tensorwaves.rtfd.io"
Source = "https://github.com/ComPWA/tensorwaves"

[project.optional-dependencies]
jax = [
    "jax",
    "jaxlib",
]
numba = [
    "numba",
]
tf = [
    "tensorflow >=2.4", # tensorflow.experimental.numpy
]
tensorflow = [
    "tensorwaves[tf]",
]
phsp = [
    "tensorwaves[tensorflow]",
    "phasespace[tf] >=1.7.0",
    'phasespace <1.9.0; python_version <"3.8.0"',
]
phasespace = [
    "tensorwaves[phsp]",
]
pwa = [
    "tensorwaves[phsp]",
    "ampform >=0.12.0", # https://github.com/ComPWA/ampform/pull/177
]
scipy = [
    "scipy >=1",
]
viz = [
    "graphviz",
]
all = [
    "tensorwaves[jax]",
    "tensorwaves[numba]",
    "tensorwaves[pwa]",
    "tensorwaves[scipy]",
    "tensorwaves[tensorflow]",
    "tensorwaves[viz]",
]
doc = [
    "tensorwaves[all]",
    'importlib-metadata; python_version <"3.8.0"',
    "ipympl",
    "jupyter",
    "matplotlib",
    "myst-nb >=0.14", # nb_ configuration prefixes
    "nbclient >=0.5.5", # https://github.com/executablebooks/jupyter-book/issues/833
    "pandas",
    "Sphinx >=3",
    "sphinx-book-theme",
    "sphinx-codeautolink[ipython]",
    "sphinx-comments",
    "sphinx-copybutton",
    "sphinx-design",
    "sphinx-thebe",
    "sphinx-togglebutton",
    "sphobjinv",
]
test-types = [
    "ipython", # test _repr_pretty_
    "pytest",
    "pytest-mock >=3.3.0",
]
test = [
    "tensorwaves[test-types]",
    "ampform >=0.13", # https://github.com/ComPWA/ampform/issues/208
    "nbmake",
    'nbmake <1.3; python_version <"3.8.0"',
    "pytest-benchmark",
    "pytest-cov",
    "pytest-xdist",
]
format = [
    "black",
]
mypy = [
    "tensorwaves[jax]",
    "tensorwaves[pwa]",
    "tensorwaves[test-types]",
    "mypy >=0.570", # attrs support
    "types-docutils",
    "types-pkg-resources",
    "types-PyYAML",
    "types-requests",
    "types-setuptools",
]
lint = [
    "tensorwaves[mypy]",
    "ruff",
]
sty = [
    "tensorwaves[format]",
    "tensorwaves[lint]",
    "pre-commit >=1.4.0",
]
jupyter = [
    "tensorwaves[doc]",
    "jupyterlab",
    "jupyterlab-code-formatter",
    "jupyterlab-lsp",
    "jupyterlab-myst",
    "python-lsp-server[rope]",
    'ypy-websocket <0.8.3; python_version <"3.8.0"',
]
dev = [
    "tensorwaves[all]",
    "tensorwaves[doc]",
    "tensorwaves[jupyter]",
    "tensorwaves[sty]",
    "tensorwaves[test]",
    "sphinx-autobuild",
    "tox >=1.9", # for skip_install, use_develop
]
